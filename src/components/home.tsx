import React, { useState, useEffect } from "react";
import { motion } from "framer-motion";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { LogOut, Upload, FileText } from "lucide-react";
import AuthForm from "./AuthForm";
import DocumentUploader from "./DocumentUploader";
import ResultsDashboard from "./ResultsDashboard";

interface User {
  id: string;
  email: string;
}

const Home = () => {
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [user, setUser] = useState<User | null>(null);
  const [activeTab, setActiveTab] = useState<string>("upload");
  const [processedDocuments, setProcessedDocuments] = useState<any[]>([]);
  const [isProcessing, setIsProcessing] = useState<boolean>(false);

  // Check if user is already authenticated on component mount
  useEffect(() => {
    const storedUser = localStorage.getItem("user");
    if (storedUser) {
      setUser(JSON.parse(storedUser));
      setIsAuthenticated(true);
    }
  }, []);

  const handleLogin = (userData: User) => {
    setUser(userData);
    setIsAuthenticated(true);
    localStorage.setItem("user", JSON.stringify(userData));
  };

  const handleLogout = () => {
    setUser(null);
    setIsAuthenticated(false);
    setProcessedDocuments([]);
    localStorage.removeItem("user");
  };

  const handleDocumentUpload = async (files: any[]) => {
    setIsProcessing(true);

    // Simulate document processing
    try {
      // In a real implementation, this would call your backend API
      const processedDocs = await Promise.all(
        files.map(async (file, index) => {
          // Simulate processing delay
          await new Promise((resolve) =>
            setTimeout(resolve, 1500 + index * 500),
          );

          return {
            id: `doc-${Date.now()}-${index}`,
            name: file.name,
            size: file.size,
            type: file.type,
            uploadDate: new Date().toISOString(),
            summary: `This is a simulated summary for ${file.name}. In a real implementation, this would be generated by an AI model.`,
            highlights: [
              { text: "Important section 1", page: 1 },
              { text: "Critical information", page: 2 },
              { text: "Key findings", page: 3 },
            ],
            metadata: {
              tags: [
                "document",
                "sample",
                file.type.includes("pdf") ? "pdf" : "docx",
              ],
              entities: ["Company X", "Person Y"],
              categories: ["Business", "Report"],
            },
          };
        }),
      );

      setProcessedDocuments((prev) => [...prev, ...processedDocs]);
      setActiveTab("results");
    } catch (error) {
      console.error("Error processing documents:", error);
    } finally {
      setIsProcessing(false);
    }
  };

  return (
    <div className="min-h-screen bg-background flex flex-col">
      {/* Header */}
      <header className="border-b bg-card">
        <div className="container mx-auto px-4 py-4 flex justify-between items-center">
          <div className="flex items-center gap-2">
            <FileText className="h-6 w-6 text-primary" />
            <h1 className="text-2xl font-bold">Document Processor</h1>
          </div>

          {isAuthenticated && user && (
            <div className="flex items-center gap-4">
              <span className="text-sm text-muted-foreground">
                {user.email}
              </span>
              <Button variant="outline" size="sm" onClick={handleLogout}>
                <LogOut className="h-4 w-4 mr-2" />
                Logout
              </Button>
            </div>
          )}
        </div>
      </header>

      {/* Main Content */}
      <main className="flex-1 container mx-auto px-4 py-8">
        {!isAuthenticated ? (
          <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.5 }}
            className="max-w-md mx-auto"
          >
            <Card>
              <CardHeader>
                <CardTitle>Welcome</CardTitle>
                <CardDescription>
                  Sign in to upload and process your documents
                </CardDescription>
              </CardHeader>
              <CardContent>
                <AuthForm onLogin={handleLogin} />
              </CardContent>
            </Card>
          </motion.div>
        ) : (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.5 }}
          >
            <Tabs
              value={activeTab}
              onValueChange={setActiveTab}
              className="w-full"
            >
              <div className="flex justify-between items-center mb-6">
                <TabsList>
                  <TabsTrigger
                    value="upload"
                    className="flex items-center gap-2"
                  >
                    <Upload className="h-4 w-4" />
                    Upload
                  </TabsTrigger>
                  <TabsTrigger
                    value="results"
                    className="flex items-center gap-2"
                  >
                    <FileText className="h-4 w-4" />
                    Results
                    {processedDocuments.length > 0 && (
                      <span className="ml-1 bg-primary text-primary-foreground rounded-full w-5 h-5 flex items-center justify-center text-xs">
                        {processedDocuments.length}
                      </span>
                    )}
                  </TabsTrigger>
                </TabsList>
              </div>

              <TabsContent value="upload" className="mt-0">
                <DocumentUploader
                  onUploadComplete={(files) => {
                    // Files are already uploaded at this point
                    console.log("Files uploaded:", files);
                  }}
                  onSummarize={(files) => {
                    // Process the uploaded files
                    handleDocumentUpload(files);
                    // Switch to results tab
                    setActiveTab("results");
                  }}
                  isProcessing={isProcessing}
                />
              </TabsContent>

              <TabsContent value="results" className="mt-0">
                <ResultsDashboard
                  documents={processedDocuments}
                  onUploadMore={() => setActiveTab("upload")}
                />
              </TabsContent>
            </Tabs>
          </motion.div>
        )}
      </main>

      {/* Footer */}
      <footer className="border-t bg-muted/40">
        <div className="container mx-auto px-4 py-4 text-center text-sm text-muted-foreground">
          Document Processing & Summarization App Â© {new Date().getFullYear()}
        </div>
      </footer>
    </div>
  );
};

export default Home;
